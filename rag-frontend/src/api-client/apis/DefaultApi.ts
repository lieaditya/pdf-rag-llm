/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  QueryModel,
  SubmitQueryRequest,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    QueryModelFromJSON,
    QueryModelToJSON,
    SubmitQueryRequestFromJSON,
    SubmitQueryRequestToJSON,
} from '../models/index';

export interface GetUserDocumentsUsersUserIdDocumentsGetRequest {
    userId: string;
}

export interface GetUserQueriesUsersUserIdQueriesGetRequest {
    userId: string;
}

export interface GetUserQueryByIdUsersUserIdQueriesQueryIdGetRequest {
    userId: string;
    queryId: string;
}

export interface SubmitUserQueryUsersUserIdQueriesPostRequest {
    userId: string;
    submitQueryRequest: SubmitQueryRequest;
}

export interface UploadUserDocumentsUsersUserIdDocumentsPostRequest {
    userId: string;
    documents: Array<Blob>;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get User Documents
     */
    async getUserDocumentsUsersUserIdDocumentsGetRaw(requestParameters: GetUserDocumentsUsersUserIdDocumentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUserDocumentsUsersUserIdDocumentsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{user_id}/documents`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get User Documents
     */
    async getUserDocumentsUsersUserIdDocumentsGet(requestParameters: GetUserDocumentsUsersUserIdDocumentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getUserDocumentsUsersUserIdDocumentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get User Queries
     */
    async getUserQueriesUsersUserIdQueriesGetRaw(requestParameters: GetUserQueriesUsersUserIdQueriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<QueryModel>>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUserQueriesUsersUserIdQueriesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{user_id}/queries`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QueryModelFromJSON));
    }

    /**
     * Get User Queries
     */
    async getUserQueriesUsersUserIdQueriesGet(requestParameters: GetUserQueriesUsersUserIdQueriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<QueryModel>> {
        const response = await this.getUserQueriesUsersUserIdQueriesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get User Query By Id
     */
    async getUserQueryByIdUsersUserIdQueriesQueryIdGetRaw(requestParameters: GetUserQueryByIdUsersUserIdQueriesQueryIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryModel>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUserQueryByIdUsersUserIdQueriesQueryIdGet().'
            );
        }

        if (requestParameters['queryId'] == null) {
            throw new runtime.RequiredError(
                'queryId',
                'Required parameter "queryId" was null or undefined when calling getUserQueryByIdUsersUserIdQueriesQueryIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{user_id}/queries/{query_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"query_id"}}`, encodeURIComponent(String(requestParameters['queryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryModelFromJSON(jsonValue));
    }

    /**
     * Get User Query By Id
     */
    async getUserQueryByIdUsersUserIdQueriesQueryIdGet(requestParameters: GetUserQueryByIdUsersUserIdQueriesQueryIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryModel> {
        const response = await this.getUserQueryByIdUsersUserIdQueriesQueryIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index
     */
    async indexGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Index
     */
    async indexGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.indexGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Submit User Query
     */
    async submitUserQueryUsersUserIdQueriesPostRaw(requestParameters: SubmitUserQueryUsersUserIdQueriesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryModel>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling submitUserQueryUsersUserIdQueriesPost().'
            );
        }

        if (requestParameters['submitQueryRequest'] == null) {
            throw new runtime.RequiredError(
                'submitQueryRequest',
                'Required parameter "submitQueryRequest" was null or undefined when calling submitUserQueryUsersUserIdQueriesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{user_id}/queries`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubmitQueryRequestToJSON(requestParameters['submitQueryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryModelFromJSON(jsonValue));
    }

    /**
     * Submit User Query
     */
    async submitUserQueryUsersUserIdQueriesPost(requestParameters: SubmitUserQueryUsersUserIdQueriesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryModel> {
        const response = await this.submitUserQueryUsersUserIdQueriesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload User Documents
     */
    async uploadUserDocumentsUsersUserIdDocumentsPostRaw(requestParameters: UploadUserDocumentsUsersUserIdDocumentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling uploadUserDocumentsUsersUserIdDocumentsPost().'
            );
        }

        if (requestParameters['documents'] == null) {
            throw new runtime.RequiredError(
                'documents',
                'Required parameter "documents" was null or undefined when calling uploadUserDocumentsUsersUserIdDocumentsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['documents'] != null) {
            requestParameters['documents'].forEach((element) => {
                formParams.append('documents', element as any);
            })
        }

        const response = await this.request({
            path: `/users/{user_id}/documents`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Upload User Documents
     */
    async uploadUserDocumentsUsersUserIdDocumentsPost(requestParameters: UploadUserDocumentsUsersUserIdDocumentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.uploadUserDocumentsUsersUserIdDocumentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
